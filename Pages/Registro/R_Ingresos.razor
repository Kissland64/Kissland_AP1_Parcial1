@page "/RegistroIngresos"
@page "/RegistroIngresos/{IngresoId:int}"
@inject NotificationService notificationService;
@inject IngresosBLL IngresosBLL

<EditForm Model="ingresos" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <h1>Registro de ingresos</h1>
        </div>
        <div class=card-body>
            <div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
                <label>ID ingresos:</label>
                <div class="input-group mb-3">
                    <InputNumber @bind-Value="ingresos.IngresoId" class="form-control" aria-describedby="BotonBuscar" />
                    <button @onclick="Buscar" class="btn btn-outline-primary" type="button" id="BotonBuscar"><i
                            class="oi oi-magnifying-glass" /></button>
                </div>
            </div>
            <div class="Fecha">
                <div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
                    <label class="form-label" for="Fecha">Fecha:</label>
                    <InputDate @bind-Value="ingresos.Fecha" class="form-control" />
                    <ValidationMessage For="@(() => ingresos.Fecha)" />
                </div>
                <h1></h1>
                <div class="row">
                    <div class="col">
                        <label class="form-label" for="Concepto">Concepto:</label>
                        <InputText @bind-Value="ingresos.Concepto" class="form-control" />
                        <ValidationMessage For="@(() => ingresos.Concepto)" />
                    </div>
                    <div class="col">
                        <label class="form-label" for="Monto">Monto:</label>
                        <InputNumber @bind-Value="ingresos.Monto" class="form-control" />
                        <ValidationMessage For="@(() => ingresos.Monto)" />
                    </div>
                </div>
                <h1></h1>
                <div class="card-footer d-flex justify-content-center">
                    <div class="btn-group">
                        <button type="button" class="btn btn-outline-primary" @onclick="Nuevo">Nuevo <i
                                class="oi oi-file" /></button>
                        <button type="submit" class="btn btn-outline-success">Guardar <i
                                class="oi oi-document" /></button>
                        <button type="button" class="btn btn-outline-danger" @onclick="Eliminar">Eliminar <i
                                class="oi oi-trash" /></button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>

<label>@mensaje</label>

@code {
    [Parameter]
    public int IngresoId { get; set; }
    public Ingresos ingresos { get; set; } = new Ingresos();
    public string mensaje = string.Empty;

    protected override void OnInitialized()
    {
        if (IngresoId > 0)
        {
            ingresos.IngresoId = IngresoId;
            Buscar();
        }
    }

    public void Buscar()
    {
        var ingresoEncontrado = IngresosBLL.Buscar(ingresos.IngresoId);
        if (ingresoEncontrado != null)
        {
            this.ingresos = ingresoEncontrado;
        }
        else
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "No se encontro ningun Aporte",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
            this.Nuevo();
        }
    }

    public void Nuevo()
    {
        this.ingresos = new Ingresos();
    }

    public bool Validar()
    {
        return string.IsNullOrEmpty(ingresos.Concepto)
        || (ingresos.IngresoId < 0)
        || (ingresos.Monto <= 0);
    }

    public void Guardar()
    {
        if (Validar())
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Revise los campos",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
            return;
        }
        var guardo = IngresosBLL.Guardar(this.ingresos);
        if (guardo)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Validacion",
                    Detail = "Aporte Guardado correctamente",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
            this.Nuevo();
        }
    }

    public void Eliminar()
    {
        if (IngresosBLL.Existe(ingresos.IngresoId) && IngresosBLL.Eliminar(this.ingresos))
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Validacion",
                    Detail = "Aporte eliminado correctamente",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
            this.Nuevo();
        }
        else
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "No hay nada para Eliminar",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
            this.Nuevo();
            return;
        }
    }
}
